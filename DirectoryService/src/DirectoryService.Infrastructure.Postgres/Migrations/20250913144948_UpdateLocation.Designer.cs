// <auto-generated />
using System;
using System.Collections.Generic;
using DirectoryService.Infrastructure.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DirectoryService.Infrastructure.Postgres.Migrations
{
    [DbContext(typeof(DirectoryServiceDbContext))]
    [Migration("20250913144948_UpdateLocation")]
    partial class UpdateLocation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DirectoryService.Domain.Departments.Department", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<short>("Depth")
                        .HasColumnType("smallint")
                        .HasColumnName("depth");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.ComplexProperty<Dictionary<string, object>>("DepartmentName", "DirectoryService.Domain.Departments.Department.DepartmentName#DepartmentName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("NameDepartment")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");
                        });

                    b.HasKey("DepartmentId")
                        .HasName("department_id");

                    b.ToTable("department", (string)null);
                });

            modelBuilder.Entity("DirectoryService.Domain.Departments.DepartmentLocation", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.HasKey("DepartmentId", "LocationId")
                        .HasName("pk_department_locations");

                    b.HasIndex("LocationId");

                    b.ToTable("department_locations", (string)null);
                });

            modelBuilder.Entity("DirectoryService.Domain.Departments.DepartmentPosition", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.HasKey("DepartmentId", "PositionId")
                        .HasName("pk_department_positions");

                    b.HasIndex("PositionId");

                    b.ToTable("department_positions", (string)null);
                });

            modelBuilder.Entity("DirectoryService.Domain.Locations.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LocationId")
                        .HasName("location_id");

                    b.ToTable("location", (string)null);
                });

            modelBuilder.Entity("DirectoryService.Domain.Positions.Position", b =>
                {
                    b.Property<Guid>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PositionId")
                        .HasName("position_id");

                    b.ToTable("position", (string)null);
                });

            modelBuilder.Entity("DirectoryService.Domain.Departments.Department", b =>
                {
                    b.OwnsOne("DirectoryService.Domain.Departments.Identifier", "Identifier", b1 =>
                        {
                            b1.Property<Guid>("DepartmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("identifier");

                            b1.HasKey("DepartmentId");

                            b1.ToTable("department");

                            b1.WithOwner()
                                .HasForeignKey("DepartmentId");
                        });

                    b.OwnsOne("DirectoryService.Domain.Departments.Path", "Path", b1 =>
                        {
                            b1.Property<Guid>("DepartmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path");

                            b1.HasKey("DepartmentId");

                            b1.ToTable("department");

                            b1.WithOwner()
                                .HasForeignKey("DepartmentId");
                        });

                    b.Navigation("Identifier")
                        .IsRequired();

                    b.Navigation("Path")
                        .IsRequired();
                });

            modelBuilder.Entity("DirectoryService.Domain.Departments.DepartmentLocation", b =>
                {
                    b.HasOne("DirectoryService.Domain.Departments.Department", "Department")
                        .WithMany("DepartmentLocations")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectoryService.Domain.Locations.Location", "Location")
                        .WithMany("DepartmentLocation")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DirectoryService.Domain.Departments.DepartmentPosition", b =>
                {
                    b.HasOne("DirectoryService.Domain.Departments.Department", "Department")
                        .WithMany("DepartmentPositions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectoryService.Domain.Positions.Position", "Position")
                        .WithMany("DepartmentPosition")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("DirectoryService.Domain.Locations.Location", b =>
                {
                    b.OwnsOne("DirectoryService.Domain.Locations.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("country");

                            b1.Property<int>("NumberStreet")
                                .HasColumnType("integer")
                                .HasColumnName("number_street");

                            b1.Property<int>("PostalCode")
                                .HasColumnType("integer")
                                .HasColumnName("postal_code");

                            b1.Property<int>("Room")
                                .HasColumnType("integer")
                                .HasColumnName("room");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("street");

                            b1.HasKey("LocationId");

                            b1.ToTable("location");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.OwnsOne("DirectoryService.Domain.Locations.LocationName", "LocationName", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("NameLocation")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.HasKey("LocationId");

                            b1.ToTable("location");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.OwnsOne("DirectoryService.Domain.Locations.Timezone", "Timezone", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("IanaCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("iana_code");

                            b1.HasKey("LocationId");

                            b1.ToTable("location");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("LocationName")
                        .IsRequired();

                    b.Navigation("Timezone")
                        .IsRequired();
                });

            modelBuilder.Entity("DirectoryService.Domain.Positions.Position", b =>
                {
                    b.OwnsOne("DirectoryService.Domain.Positions.PositionName", "PositionName", b1 =>
                        {
                            b1.Property<Guid>("PositionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("NamePosition")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name_position");

                            b1.HasKey("PositionId");

                            b1.ToTable("position");

                            b1.WithOwner()
                                .HasForeignKey("PositionId");
                        });

                    b.Navigation("PositionName")
                        .IsRequired();
                });

            modelBuilder.Entity("DirectoryService.Domain.Departments.Department", b =>
                {
                    b.Navigation("DepartmentLocations");

                    b.Navigation("DepartmentPositions");
                });

            modelBuilder.Entity("DirectoryService.Domain.Locations.Location", b =>
                {
                    b.Navigation("DepartmentLocation");
                });

            modelBuilder.Entity("DirectoryService.Domain.Positions.Position", b =>
                {
                    b.Navigation("DepartmentPosition");
                });
#pragma warning restore 612, 618
        }
    }
}
